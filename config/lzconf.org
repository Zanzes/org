#+SEQ_TODO: On(e!/!) | Off(d!/!)

* Pre config
** Emacs window manager
*** On Install
#+BEGIN_SRC emacs-lisp
  (use-package exwm
    :ensure t
    :config
    (require 'exwm-config)
    (exwm-config-default)
    (exwm-config-ido))
#+END_SRC
*** On Set workspaces to 3
    :LOGBOOK:
    - State "On"         from              [2019-05-01 Wed 23:42]
    :END:
#+BEGIN_SRC emacs-lisp
  (setq exwm-workspace-number 3)
#+END_SRC
*** On Desktop layout
#+BEGIN_SRC emacs-lisp
  (require 'exwm-randr)
  (setq exwm-randr-workspace-output-plist '(1 "DVI-D-0" 0 "DP-1" 2 "DVI-I-1"))
  (exwm-randr-enable)
#+END_SRC
*** Hotkeys
**** Off Open dmenu (win-d)
#+BEGIN_SRC emacs-lisp
  ;;  (setq exwm-input-global-keys
  ;;	`(
  ;;	  ([?\s-d] . (lambda (command)
  ;;		       (interactive (list (read-shell-command "$ ")))
  ;;		       (start-process-shell-command command nil command)))))
#+END_SRC
*** On Dmenu
#+BEGIN_SRC emacs-lisp
  (use-package dmenu
    :ensure t
    :bind
    ("s-SPC" . 'dmenu))
#+END_SRC
*** On Hide menus and scroll-bars
#+BEGIN_SRC emacs-lisp
  (fringe-mode 1)
  (tool-bar-mode -1)
  (menu-bar-mode -1)
  (scroll-bar-mode -1)
#+END_SRC
*** On Y for yes
#+BEGIN_SRC emacs-lisp
  (defalias 'yes-or-no-p 'y-or-n-p)
#+END_SRC
*** On Enable server
    :LOGBOOK:
    - State "On"         from              [2019-05-01 Wed 23:42]
    :END:
#+BEGIN_SRC emacs-lisp
  (server-start)
#+END_SRC
*** On Enable exwm
    :LOGBOOK:
    - State "On"         from              [2019-05-01 Wed 23:43]
    :END:
#+BEGIN_SRC emacs-lisp
  (exwm-enable)
#+END_SRC


* Audio
** On Enable volume control

#+BEGIN_SRC emacs-lisp
  (use-package volume
    :ensure t)
#+END_SRC

** On Hotkeys
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "<XF86AudioMute>") 'volume)
  (global-set-key (kbd "<XF86AudioRaiseVolume>") 'volume-raise)
  (global-set-key (kbd "<XF86AudioLowerVolume>") 'volume-lower)
#+END_SRC
* Avy
** On Enable
#+BEGIN_SRC emacs-lisp
  (use-package avy
    :ensure t
    :bind
    ("M-s" . avy-goto-char))
#+END_SRC
* Buffers
** On Switch buffers
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x C-b") 'ido-switch-buffer)
#+END_SRC
** On Expert mode
#+BEGIN_SRC emacs-lisp
  (setq ibuffer-expert t)
#+END_SRC
** On Enable ibuffer
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-x b") 'ibuffer)
#+END_SRC
** On Kill current buffer
#+BEGIN_SRC emacs-lisp
  (defun kill-current-buffer ()
    (interactive)
    (kill-buffer (current-buffer)))
  (global-set-key (kbd "C-x k") 'kill-current-buffer)
#+END_SRC
* Coding
** Off Jump sub-words
#+BEGIN_SRC emacs-lisp
  ;;(global-subword-mode 1)
#+END_SRC
** On Electric
#+BEGIN_SRC emacs-lisp
  (setq electric-pair-pairs '(
			      (?\( . ?\))
			      (?\[ . ?\])
			      (?\{ . ?\})
			      ))
  (electric-pair-mode t)
#+END_SRC
** On Killl word
#+BEGIN_SRC emacs-lisp
  (defun killl-word()
    (interactive)
    (backward-kill-word 1)
    (kill-word 1))
  (global-set-key (kbd "C-c w w") 'killl-word)
#+END_SRC
** On Kill line
#+BEGIN_SRC emacs-lisp
  (defun copy-line ()
    (interactive)
    (move-to-column 0)
    (kill-line))
  (global-set-key (kbd "C-c w l") 'copy-line)
#+END_SRC
** On Hungry delete
#+BEGIN_SRC emacs-lisp
  (use-package hungry-delete
    :ensure t
    :config (global-hungry-delete-mode))
#+END_SRC
** On Show parens (rainbow-delimiters)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-delimiters
    :ensure t
    :init
    (add-hook 'prog-mode-hook #'rainbow-delimiters-mode))
#+END_SRC
** On Show color codes (rainbow-mode)
#+BEGIN_SRC emacs-lisp
  (use-package rainbow-mode
    :ensure t
    :init (add-hook 'prog-mode-hook 'rainbow-mode))
#+END_SRC

** On Emacs Lisp src snippet
#+BEGIN_SRC emacs-lisp
  (add-to-list 'org-structure-template-alist
	       '("el" "#+BEGIN_SRC emacs-lisp\n?\n#+END_SRC"))
#+END_SRC

** On Auto compleation
*** Company
#+BEGIN_SRC emacs-lisp
  (use-package company
    :ensure t
    :config
    (setq company-idle-delay 0)
    (setq company-minimum-prefix-length 2)
    :init
    (add-hook 'after-init-hook 'global-company-mode))
#+END_SRC
** On up-kill-ring
#+BEGIN_SRC emacs-lisp
  (use-package popup-kill-ring
    :ensure t
    :bind ("M-y" . popup-kill-ring))
#+END_SRC
* Config file
** On Open lzconf.org
#+BEGIN_SRC emacs-lisp
  (defun open-lzconf()
    (interactive)
    (find-file "~/.emacs.d/lzconf.org"))
  (global-set-key (kbd "C-c e") 'open-lzconf)
#+END_SRC

** On Open init.el 
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 18:36]
:END:
#+BEGIN_SRC emacs-lisp
  (defun open-initel()
    (interactive)
    (find-file "~/.emacs.d/init.el"))
  (global-set-key (kbd "C-c C-x e") 'open-initel)
#+END_SRC

** On Reload
#+BEGIN_SRC emacs-lisp
  (defun reload-lzconf ()
    (interactive)
    (org-babel-load-file (expand-file-name "~/.emacs.d/lzconf.org")))
  (global-set-key (kbd "C-c r") 'reload-lzconf)
#+END_SRC
* Cursor
** On Beacon
#+BEGIN_SRC emacs-lisp
  (use-package beacon
    :ensure t
    :init
    (beacon-mode 1))
#+END_SRC
** Off Heightlight line
#+BEGIN_SRC emacs-lisp
;;  (global-hl-line-mode t)
#+END_SRC
* Emacs customize
** On No startup screen
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 12:02]
:END:
#+BEGIN_SRC emacs-lisp
  (setq inhibit-startup-screen t)
#+END_SRC
** On No scratch message
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 12:02]
:END:
#+BEGIN_SRC emacs-lisp
  (setq initial-scratch-message "")
#+END_SRC
* Dashboard
** On Enable
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 11:38]
:END:
#+BEGIN_SRC emacs-lisp
  (use-package dashboard
    :ensure t
    :config
    (dashboard-setup-startup-hook)
    (setq dsahboard-items '((recents . 16)))
    (setq dashboard-banner-logo-title "You have gained access to this system. Remember with great power comes great responsibility."))
#+END_SRC
* FileSystem
** On Disable/Relocate junk files
#+BEGIN_SRC emacs-lisp
  (setq create-lockfiles nil)
  (setq backup-directory-alist `((".*" . ,temporary-file-directory)))
  (setq auto-save-file-name-transforms `((".*" ,temporary-file-directory t)))
  (setq default-directory "~/dev/")
#+END_SRC
** On Default notes file
   - State "On"         from              [2019-04-30 Tue 07:20]

#+BEGIN_SRC emacs-lisp
  (setq org-default-notes-file (concat org-directory (expand-file-name "~/dev/org/notes.org")))
#+END_SRC
* Frames
** Off Auto-resize frames with golden-ratio
#+BEGIN_SRC emacs-lisp
  (use-package golden-ratio
      :ensure t)
  (golden-ratio-mode -1)
  (setq split-width-threshold nil)
#+END_SRC
** On Line scrolling
#+BEGIN_SRC emacs-lisp
  (setq scroll-conservatively 100)
#+END_SRC
** On Start in ido-mode
#+BEGIN_SRC emacs-lisp
  (setq ido-enable-flex-matching nil)
  (setq ido-create-new-buffer 'always)
  (setq ido-everywhere 1)
  (ido-mode 1)
#+END_SRC
** On ido-vertical
#+BEGIN_SRC emacs-lisp
  (use-package ido-vertical-mode
    :ensure t
    :init
    (ido-vertical-mode 1))
#+END_SRC
** Off ido-vertical hotkeys
#+BEGIN_SRC emacs-lisp
  ;;(setq ido-vertical-define-keys 'C-n-and-C-p-only)
#+END_SRC
** On smex
#+BEGIN_SRC emacs-lisp
  (use-package smex
    :ensure t
    :init (smex-initialize)
    :bind
    ("M-x" . smex))
#+END_SRC
** On Window switcher
#+BEGIN_SRC emacs-lisp
  (use-package switch-window
    :ensure t
    :config
    (setq switch-window-input-style 'minibuffer)
    (setq switch-window-increase 4)
    (setq switch-window-threshold 2)
    (setq switch-window-shortcut-style 'qwerty)
    (setq switch-window-qwerty-shortcuts
	  '("a" "s" "d" "f" "g" "h" "i" "j" "k"))
    :bind
    ([remap other-window] . switch-window))
#+END_SRC
** On Follow window switcher horizontally
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-horizontally ()
    (interactive)
    (split-window-below)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 2") 'split-and-follow-horizontally)
#+END_SRC
** On Follow window switcher vertically
#+BEGIN_SRC emacs-lisp
  (defun split-and-follow-vertically ()
    (interactive)
    (split-window-right)
    (balance-windows)
    (other-window 1))
  (global-set-key (kbd "C-x 3") 'split-and-follow-vertically)
#+END_SRC* IDO
* Minibuffer
** On Hide load time
#+BEGIN_SRC emacs-lisp
  (setq display-time-default-load-average nil)
#+END_SRC

** On Show time
#+BEGIN_SRC emacs-lisp
  (setq display-time-24hr-format t)
  (display-time-mode 1)
#+END_SRC

** Off Show keyboard shortcut hints
#+BEGIN_SRC emacs-lisp
  ;;(use-package which-key
  ;;  :ensure t
  ;;  :init
  ;;  (which-key-mode))
#+END_SRC

** On Show lines and columns
#+BEGIN_SRC emacs-lisp
  (line-number-mode 1)
  (column-number-mode 1)
#+END_SRC

** On Spaceline
#+BEGIN_SRC emacs-lisp
  (use-package spaceline
    :ensure t
    :config
    (require 'spaceline-config)
    (setq powerline-default-separator (quote arrow))
    (spaceline-emacs-theme))
#+END_SRC
* Org-mode
** Hotkeys
*** On Store link
    - State "On"         from              [2019-04-30 Tue 07:17]
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c l") 'org-store-link)
#+END_SRC
*** On Agenda
    - State "On"         from              [2019-04-30 Tue 07:16]
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda)
#+END_SRC
*** On Capture
    - State "On"         from              [2019-04-30 Tue 07:16]
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c c") 'org-capture)
#+END_SRC
** Off Set indetation level to 4
:LOGBOOK:
- State "Off"        from "On"         [2019-05-02 Thu 00:41]
- State "On"         from              [2019-05-01 Wed 18:34]
:END:
#+BEGIN_SRC emacs-lisp
;  (setq org-indent-indentation-per-level 4)
#+END_SRC
** On Indent mode
   :LOGBOOK:
   - State "On"         from "Off"        [2019-04-30 Tue 23:40]
   :END:
#+BEGIN_SRC emacs-lisp
  (add-hook 'org-mode-hook 'org-indent-mode)
#+END_SRC
** On Ellipsis
   :LOGBOOK:
   - State "On"         from              [2019-04-30 Tue 23:42]
   :END:
#+BEGIN_SRC emacs-lisp
  (setq org-ellipsis " Â»")
#+END_SRC
** On Other
:LOGBOOK:
- State "On"         from              [2019-04-30 Tue 23:47]
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-src-fontify-natively t)
  (setq org-src-tab-acts-natively t)
  (setq org-confirm-babel-evaluate nil)
  (setq org-export-with-smart-quotes t)
  (setq org-src-window-setup 'current-window)
#+END_SRC

** Off Contributor package
   - State "Off"        from              [2019-04-30 Tue 07:42]
#+BEGIN_SRC emacs-lisp
;;  (use-package org-plus-contrib
;;    :ensure t)
#+END_SRC
** On Change stars(*) to bullets
#+BEGIN_SRC emacs-lisp
  (use-package org-bullets
    :ensure t
    :config
    (add-hook 'org-mode-hook (lambda () (org-bullets-mode))))
#+END_SRC
** On Better code editing mode
 #+BEGIN_SRC emacs-lisp
   (setq org-src-window-setup 'current-window)
 #+END_SRC
** On Open agenda function
#+BEGIN_SRC emacs-lisp
  (defun org-agenda-show-agenda-and-todo (&optional arg)
    (interactive "P")
    (org-agenda arg "n"))
#+END_SRC
** On Hotkey to open agenda
#+BEGIN_SRC emacs-lisp
  (global-set-key (kbd "C-c a") 'org-agenda-show-agenda-and-todo)
#+END_SRC
** On Set agenda files
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 12:05]
:END:
#+BEGIN_SRC emacs-lisp
  (org-agenda-files (quote ("~/dev/org/todo.org")))
#+END_SRC

** On Enable log into logbook drawer
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 18:35]
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-log-into-drawer t)
#+END_SRC

** On Pretty symbols
:LOGBOOK:
- State "On"         from              [2019-05-01 Wed 18:38]
:END:
#+BEGIN_SRC emacs-lisp
  (setq org-pretty-entities t)
#+END_SRC
* Terminal
** On Default to bash shell
#+BEGIN_SRC emacs-lisp
  (defvar zshell "/bin/bash")
  (defadvice ansi-term (before force-bash)
    (interactive (list zshell)))
  (ad-activate 'ansi-term)
#+END_SRC 
** Off Shortcut
#+BEGIN_SRC emacs-lisp
  ;;(global-set-key (kbd "M-<return>") 'ansi-term)
#+END_SRC
** On Sudo
#+BEGIN_SRC emacs-lisp
  (use-package sudo-edit
    :ensure t
    :bind ("S-e" . sudo-edit))
#+END_SRC
* Text
** Off Proportional line height
#+BEGIN_SRC emacs-lisp
  ;;(custom-theme-set-faces
  ;; 'user
  ;; `(org-level-8 ((t (,@headline ,@variable-tuple))))
  ;; `(org-level-7 ((t (,@headline ,@variable-tuple))))
  ;; `(org-level-6 ((t (,@headline ,@variable-tuple))))
  ;; `(org-level-5 ((t (,@headline ,@variable-tuple))))
  ;; `(org-level-4 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;; `(org-level-3 ((t (,@headline ,@variable-tuple :height 1.1))))
  ;; `(org-level-2 ((t (,@headline ,@variable-tuple :height 1.2))))
  ;; `(org-level-1 ((t (,@headline ,@variable-tuple :height 1.5))))
  ;; `(org-document-title ((t (,@headline ,@variable-tuple :height 2.0 :underline nil)))))
#+END_SRC
** On Prettify symbols
#+BEGIN_SRC emacs-lisp
    (global-prettify-symbols-mode t)
    (when window-system
      (use-package pretty-mode
	:ensure t
	:config
	(global-pretty-mode t)
	(add-hook 'prog-mode-hook 'pretty-mode)))
#+END_SRC

** On Search
   :LOGBOOK:
   - State "On"         from              [2019-04-30 Tue 23:12]
   :END:
*** Swiper
#+BEGIN_SRC emacs-lisp
  (use-package swiper
    :ensure t
    :bind ("C-s" . swiper))
#+END_SRC
** On Mark multiple
   :LOGBOOK:
   - State "On"         from              [2019-04-30 Tue 23:29]
   :END:
#+BEGIN_SRC emacs-lisp
  (use-package mark-multiple
    :ensure t
    :bind ("C-c q" . 'mark-next-like-this))
#+END_SRC

** Expand region
#+BEGIN_SRC emacs-lisp
  (use-package expand-region
    :ensure t
    :bind ("C-q" . er/expand-region))
#+END_SRC
* TODO
** On Custom key-words

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keywords
        '((sequence "TODO(t!/!)" "IMPORTANT(i!/!)" "ACTIVE(a!/!)" "|" "DONE(d!/!)")))
#+END_SRC

** On Keyword colors

:LOGBOOK:
- State "On"         from "Off"        [2019-05-01 Wed 23:07]
- State "Off"        from "On"         [2019-05-01 Wed 23:07]
:END:

#+BEGIN_SRC emacs-lisp
  (setq org-todo-keyword-faces
    '(("TODO" . "red")
     ("DONE" . "green")
     ("IMPORTANT" . "red")
     ("ACTIVE" .  "deep sky blue")
     ("On" . "green")
     ("Off" . "red")))
#+END_SRC

